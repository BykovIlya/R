vcovHC(model,type="HC2") # еще один вариант
vcovHC(model) # современный вариант формулы Уайта "HC3"
coeftest(model) # обычной оценки ковариационной матрицы
5.926405e-07 - 7.155278e-07
bptest(model)
# тест Голдфельда-Квандта
gqtest(model, order.by = ~expr80, data=Griliches, fraction = 0.2)
data(Solow)
model2 <- lm (q ~ k + A, data = Solow)
summary(model)
bgtest(model2,order = 2)
bgtest(model2,order = 3)
Sys.setlocale("LC_TIME","C") # это шаманское заклинание позволяет избежать проблем с русской кодировкой месяцев под windows
# цены акций компании Apple:
getSymbols(Symbols = "AAPL",from="2010-01-01",
to="2014-02-03",src="google")
head(AAPL)
tail(AAPL)
# Esli russkie bukvi prevratilitis v krakozyabry,
# to File - Reopen with encoding... - UTF-8 - Set as default - OK
library("lubridate") # работа с датами
library("sandwich") # vcovHC, vcovHAC
library("lmtest") # тесты
library("car") # еще тесты
library("zoo") # временные ряды
library("xts") # еще ряды
library("dplyr") # манипуляции с данными
library("broom") # манипуляции
library("ggplot2") # графики
library("quantmod") # загрузка с finance.google.com
library("rusquant") # загрузка с finam.ru
library("sophisthse") # загрузка с sophist.hse.ru
library("Quandl") # загрузка с Quandl
# задаём даты в виде простого текста
x <- c("2012-04-15","2011-08-17")
y <- ymd(x) # конвертируем в специальный формат дат
y
y + days(20) # прибавим 20 дней
y - years(10) # вычтем 10 лет
day(y) # вытащим из даты только число
month(y) # ... только месяц
year(y) # ... только год
vignette("lubridate") # более подробная справка про даты
# создадим временной ряд
x <- rnorm(5) # пять N(0,1) случайных величин
x
y <- ymd("2014-01-01")+days(0:4) # даты к этим величинам
y
ts <- zoo(x,order.by=y) # склеим числа и даты в один временной ряд
ts
lag(ts,-1) # лаг, то есть прошлое значение ряда
lag(ts,1) # форвардный лаг, то есть будущее значение
diff(ts) # приращение ряда
# те же пять чисел, только оформленные как квартальные данные
ts2 <- zooreg(x,start=as.yearqtr("2014-01"),freq=4)
ts2
# те же пять чисел, только оформленные как месячные данные
ts3 <- zooreg(x,start=as.yearmon("2014-01"),freq=12)
ts3
data("Investment") # встроенный набор данных
help("Investment")
start(Investment) # момент начала временного ряда
end(Investment) # окончания
time(Investment) # только моменты времени
coredata(Investment) # только сами числа без дат
dna <- Investment # скопируем набор данных Investment
dna[1,2] <- NA # и внесем туда искусственно пропуски
dna[5,3] <- NA
na.approx(dna) # линейная аппроксимация
na.locf(dna) # заполнение последним известным значением
# загрузка данных с sophist.hse.ru
# это численность населения России
a <- sophisthse("POPNUM_Y")
a
# другие названия рядов можно глянуть
#на http://sophist.hse.ru/hse/nindex.shtml
# например, CPI_Y_CHI --- индекс потребительских цен
# загрузка данных с quandl
b <- Quandl("FRED/GNP")
b
# это огромная база, по ней есть удобный поиск
# https://www.quandl.com/
# загрузка данных finance.google.com
Sys.setlocale("LC_TIME","C") # это шаманское заклинание позволяет избежать проблем с русской кодировкой месяцев под windows
# цены акций компании Apple:
getSymbols(Symbols = "AAPL",from="2010-01-01",
to="2014-02-03",src="google")
head(AAPL)
tail(AAPL)
Sys.setlocale("LC_TIME","C")
getSymbols(Symbols = "INTC",from="2010-01-01", to="2014-02-03",src="google")
plot(INTC$INTC.Close, main = "")
Sys.setlocale("LC_TIME","C")
getSymbols(Symbols = "AAPL",from="2010-01-01", to="2014-02-03",src="google")
plot(AAPL$AAPL.Close, main = "")
# загрузка данных с finam.ru
# цены акций компании Газпром
getSymbols(Symbols="GAZP",from="2011-01-02",
to="2014-09-09",src="Finam")
head(GAZP)
tail(GAZP)
# несколько вариантов графиков:
plot(GAZP)
autoplot(GAZP[,1:4])
autoplot(GAZP[,1:4],facets = NULL)
chartSeries(GAZP)
# возвращаемся к набору данных с инвестициями
# в R есть два популярных формата хранения табличных данных
# это data.frame для невременных рядов
# и zoo или xts для временных рядов
# некоторые функции заточены под один формат, некоторые - под другой
# мы превращаем data.frame Investment в zoo временной ряд
d <- as.zoo(Investment)
autoplot(d[,1:2],facets = NULL)
# простая линейная модель
model <- lm(data=d, RealInv~RealInt+RealGNP)
summary(model) # краткий отчет по модели
coeftest(model) # тесты на коэффициенты
confint(model) # доверительные интервалы для коэффициентов
# в этих трех командах по умолчанию используются
# некорректные для автокорреляции станадртные ошибки
# добавим к исходных данным остатки и прогнозы
d_aug <- augment(model, as.data.frame(d))
glimpse(d_aug)
qplot(data=d_aug,lag(.resid),.resid) # график остатка от предыдущего значения
vcov(model) # обычная оценка ковариационной матрицы
# не годная в условиях автокорреляции
vcovHAC(model) # робастная оценка ковариационной матрицы
# годная в условиях автокорреляции
# тестируем гипотезы о равенстве коэффициентов нулю
# с помощью правильной оценки ковариационной матрицы
coeftest(model,vcov. = vcovHAC(model))
# строим корректные при автокоррреляции доверительные интервалы
conftable <- coeftest(model,vcov. = vcovHAC(model))
ci <- data.frame(estimate=conftable[,1],
se_ac=conftable[,2])
ci <- mutate(ci,left_95=estimate-1.96*se_ac,
right_95=estimate+1.96*se_ac)
ci
# Durbin-Watson
# H0: нет автокорреляции
# Ha: автокорреляции 1-го порядка
dwt(model)
res <- dwt(model)
res$dw # значение статистики DW
res$p # симуляционное p-value.
# В силу небольшого количества наблюдений и симуляционных свойств алгоритма может колебаться
res$r # оценка корреляции
# Тест Бройша-Годфри
# H0: нет автокорреляции
# Ha: автокорреляция k-го порядка
bgtest(model2,order = 3)
# H0 не отвергается
res <- bgtest(model2,order = 2)
res$statistic # значение статистики BG
res$p.value # P-значение
setwd("~/GitHub/R/trading")
setwd("C:/Users/Екатерина/Documents/GitHub/R/trading")
ls()
# if you see KRAKOZYABRY then do
# "File" - "Reopen with encoding" - "UTF-8" - (Set as default) - OK
Sys.setenv(LANG = "en")
#install.packages("quantmod", dependencies=TRUE)
library("quantmod")
#install.packages("zoo", dependencies=TRUE)
library("zoo")
#install.packages("TTR", dependencies=TRUE)
library("TTR")
#install.packages("png", dependencies=TRUE)
library("png")
#install.packages("checkpoint", dependencies=TRUE)
#library("checkpoint")
#checkpoint ("2015-04-05", R.version = "3.1.2", checkpointLocation = "C:/Users/Екатерина/Documents/GitHub/R/trading")
#Считываем данные из файла, приведем их к виду, пригодному для анализа в R:
Quotes1 <- read.csv(file="HistoricalQuotes.csv",stringsAsFactors = FALSE, header=TRUE, sep=",", dec= ".")
for (i in 2:6) Quotes1[,i]  <- as.numeric(as.character(Quotes1[,i]))
#Инвертируем значения:
Quotes <- subset(Quotes1, select = c("date", "close", "volume",  "open", "high",  "low"));
for (i in 1:nrow(Quotes1)) Quotes[i,]  <- Quotes1[nrow(Quotes1) - i + 1,]
Quotes[,1]  <- as.Date(Quotes[,1])
Quotes = Quotes[-1,]
rownames(Quotes)<-NULL
rm(Quotes1)
summary(Quotes)
#Линейные графики:
plot(Quotes[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
plot(Quotes[1:300,3], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Объем торгов", main="Акции компании ORACLE", ylim=c(0,203555500) )
#Переведем в удобоваримый вид для наших пакетов
ORCL <- xts(Quotes[, 2:6], order.by=as.POSIXct(Quotes[,1]))
ORCL <- ORCL[ ! duplicated( index(ORCL) ),  ]
#График цены в форме японских свечей:
chartSeries(ORCL,subset='2005-03-28::2005-10-26')
#Столбиковый график:
barChart(ORCL,subset='2005-03-28::2005-10-26', theme='white.mono',bar.type='hlc')
#Скользящее среднее на основании цены закрытия, окно усреднения - 10 отсчетов:
chartSeries(ORCL, subset='2005-03-28::2005-10-26',TA="addSMA(10)")
#Скользящее среднее на основании цены закрытия, окно усреднения - 50 отсчетов:
chartSeries(ORCL, subset='2005-03-28::2005-10-26',TA="addSMA(50)")
#График сопоставления скользящих средних между собой:
for (i in 10:nrow(Quotes)) Quotes[i,7] <- mean(Quotes[(i-9):i,2])
plot(Quotes[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
lines(Quotes[1:300,7], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[7] <- "SMAS"
for (i in 50:nrow(Quotes)) Quotes[i,8] <- mean(Quotes[(i-49):i,2])
lines(Quotes[1:300,8], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[8] <- "SMAL"
legend("topleft", c("SMA-S", "SMA-L"), col=c("blue", "orange"), lwd=4)
#График сопоставления экспоненциальных скользящих средних между собой:
Quotes[,9] <- EMA(Quotes[,2], n=10, ratio = 1-((10-1)/(10+1)))
plot(Quotes[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
lines(Quotes[1:300,9], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[9] <- "EMAS"
Quotes[,10] <- EMA(Quotes[,2], n=50, ratio = 1 - ((50-1)/(50+1)))
lines(Quotes[1:300,10], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[10] <- "EMAL"
legend("topleft", c("EMA-S", "EMA-L"), col=c("blue", "orange"), lwd=4)
WMA <- function(L, data){
wma_w <- function(L,n)
{
if((n >= 0)&(n < L)) (2/(L*(L+1)))*(L-n)
else 0
}
x <- vector(mode="numeric", length=NROW(data))
for (i in 1:NROW(data)){
if (i<L) x[i] <- NA
else {
value = 0
counter = 0
for (j in i:(i-L+1)){
value = value + data[j] * wma_w(L,counter)
counter = counter + 1
}
x[i]<-value
}
}
return(x)
}
Quotes[,11] <- WMA(10, Quotes[, 2])
Quotes[,12] <- WMA(50, Quotes[, 2])
#График сопоставления различных окон между собой:
plot(Quotes[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
lines(Quotes[1:300,11], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[11] <- "WMAS"
lines(Quotes[1:300,12], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
colnames(Quotes)[12] <- "WMAL"
legend("topleft", c("WMA-S", "WMA-L"), col=c("blue", "orange"), lwd=4)
#Графики для короткого окна усреднения:
plot(Quotes[1:100,2], type="l", lwd=2, col="black", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
lines(Quotes[1:100,7], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
lines(Quotes[1:100,9], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
lines(Quotes[1:100,11], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
legend("topleft", c("SMA-S", "EMA-S", "WMA-S"), col=c("red", "orange", "blue"), lwd=4)
#Графики для длинного окна усреднения:
plot(Quotes[1:100,2], type="l", lwd=2, col="black", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE", ylim=c(10,16) )
lines(Quotes[1:100,8], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
lines(Quotes[1:100,10], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
lines(Quotes[1:100,12], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
legend("topleft", c("SMA-L", "EMA-L", "WMA-L"), col=c("red", "orange", "blue"), lwd=4)
#Графики для EMA-S и EMA-L:
drawSquares <- function(data, start, plot=FALSE){
vec <- vector()
notFirst = FALSE;
init = FALSE;
ix = 50;
miny = 0;
maxy = 50;
if (data[start,1] > data[start,2]){
init = TRUE;
}
for (i in start:NROW(data)){
if (init == TRUE){
if (data[i,1]<data[i,2]){
init=FALSE;
vec <- c(vec,i)
if (notFirst & plot)   rect(ix,miny,i,maxy, col=rgb(0.3,0.9,0.5,alpha=0.3));
if (!notFirst) notFirst = TRUE;
ix = i;
}
}else{
if (data[i,1]>data[i,2]){
init=TRUE;
vec <- c(vec,i)
if (notFirst & plot) rect(ix,miny,i,maxy, col=rgb(0.6,0.2,0.7,alpha=0.3));
if (!notFirst) notFirst = TRUE;
ix = i;
}
}
}
return(vec)
}
plot(Quotes[,2], xaxt='n',type="l", lwd=2, col= rgb(0,0,0,alpha = 0.4), xlab="", ylab="Цена закрытия", main="Акции компании ORACLE")
lines(Quotes[,9], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
lines(Quotes[,10], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE" )
vec <- drawSquares(Quotes[,9:10], 50)
axis(side=1, at=vec,labels=Quotes[vec,1], las=2,cex.axis = 0.6,srt = 60)
legend("topleft", c("EMA-S", "EMA-L"), col=c("red", "orange"), lwd=2)
#imitation game
Quotes$budget <- Quotes[NROW(Quotes),2]*500
Quotes$papers <- 0
initx <- 50
intersections <- drawSquares(Quotes[,9:10], initx, plot = TRUE)
shallBuy <- FALSE
if (Quotes[initx,9] < Quotes[initx,10]) shallBuy <-TRUE
for (i in 1:NROW(intersections))
{
if (shallBuy){
index <- intersections[i]
price <- Quotes[index,2]
budget <-  Quotes[index,13]
papers <-  budget  %/% price
budget <- budget %% price
Quotes[(index:(NROW(Quotes))),14]<-papers
Quotes[(index:(NROW(Quotes))),13]<-budget
shallBuy <- FALSE
}else{
if (!shallBuy){
index <- intersections[i]
price <- Quotes[index,2]
budget <-  Quotes[index,13] + price * Quotes[index,14]
papers <-  0
Quotes[(index:NROW(Quotes)),14]<-papers
Quotes[(index:NROW(Quotes)),13]<-budget
shallBuy <- TRUE
}
}
}
legend("topleft", c("EMA-S", "EMA-L"), col=c("red", "orange"), lwd=2)
# сделки с плечом и короткие сделки
Quotes_new <- subset(Quotes, select = c("date", "close",  "open", "high",  "low"))
for (i in 10:nrow(Quotes_new)) Quotes_new[i,6] <- mean(Quotes_new[(i-9):i,2])
colnames(Quotes_new)[6] <- "SMAS 10"
for (i in 29:nrow(Quotes)) Quotes_new[i,7] <- mean(Quotes_new[(i-28):i,2])
initx <- 29
colnames(Quotes_new)[7] <- "SMAL 29"
plot(Quotes_new[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)", ylim=c(10,16) )
lines(Quotes_new[1:300,6], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)" )
lines(Quotes_new[1:300,7], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)" )
intersections <- drawSquares(Quotes_new[,6:7], initx, plot = TRUE)
legend("topleft", c("SMA-S 10", "SMA-L 29"), col=c("blue", "orange"), lwd=4)
# сделки с плечом и короткие сделки
Quotes_new <- subset(Quotes, select = c("date", "close",  "open", "high",  "low"))
for (i in 10:nrow(Quotes_new)) Quotes_new[i,6] <- mean(Quotes_new[(i-9):i,2])
colnames(Quotes_new)[6] <- "SMAS 10"
for (i in 29:nrow(Quotes)) Quotes_new[i,7] <- mean(Quotes_new[(i-28):i,2])
initx <- 29
colnames(Quotes_new)[7] <- "SMAL 29"
plot(Quotes_new[1:300,2], type="l", lwd=2, col="red", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)", ylim=c(10,16) )
lines(Quotes_new[1:300,6], type="l", lwd=2, col="blue", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)" )
lines(Quotes_new[1:300,7], type="l", lwd=2, col="orange", xlab="Наблюдения", ylab="Цена закрытия", main="Акции компании ORACLE (лучшая стратегия)" )
intersections <- drawSquares(Quotes_new[,6:7], initx, plot = TRUE)
legend("topleft", c("SMA-S 10", "SMA-L 29"), col=c("blue", "orange"), lwd=4)
Quotes_new$budget <- Quotes_new[NROW(Quotes_new),2]*500
Quotes_new$papers <- 0
Quotes_new$budget_credit <- 0
Quotes_new$papers_credit <- 0
сredit <- 0
stocks <- 0
shallBuy <- FALSE
if (Quotes_new[initx,6] < Quotes_new[initx,7]) shallBuy <-TRUE
for (i in 1:NROW(intersections) )
{
index <- intersections[i]
if (shallBuy){
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers <- ( 0.9992 * budget * 2 ) %/% price
payment <- papers * price * 1.0008
budget <- budget - payment/2
budget_credit <- budget_credit + payment / 2
papers <- papers - papers_credit
papers_credit <- 0
# вот тут мы покупаем что-то на наши средства
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- FALSE
}else{
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers_credit <- papers_credit + papers
budget <- papers * 2 * price * 0.9992 + budget - budget_credit
budget_credit <- 0
papers <- 0
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- TRUE
}
}
Quotes_new$balance <- ( Quotes_new$papers - Quotes_new$papers_credit ) *Quotes_new$close + Quotes_new$budget - Quotes_new$budget_credit
View(Quotes_new)
View(Quotes_new)
Quotes_new[nrow(Quotes_new),ncol(Quotes_new))
Quotes_new[nrow(Quotes_new),ncol(Quotes_new)]
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
Quotes_new$budget <- Quotes_new[NROW(Quotes_new),2]*500
Quotes_new$papers <- 0
Quotes_new$budget_credit <- 0
Quotes_new$papers_credit <- 0
сredit <- 0
stocks <- 0
shallBuy <- FALSE
if (Quotes_new[initx,6] < Quotes_new[initx,7]) shallBuy <-TRUE
for (i in 1:NROW(intersections) )
{
index <- intersections[i]
if (shallBuy){
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers <- ( 0.9992 * budget * 2 ) %/% price
payment <- papers * price * 1.0008
budget <- budget - payment/2
budget_credit <- budget_credit + payment / 2
papers <- papers - papers_credit
papers_credit <- 0
# вот тут мы покупаем что-то на наши средства
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- FALSE
}else{
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers_credit <- papers_credit + papers
budget <- papers * 2 * price * 0.9992 + budget - budget_credit
budget_credit <- 0
papers <- 0
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- TRUE
}
}
axis(side=1, at=vec,labels=Quotes[vec,1], las=2,cex.axis = 0.6,srt = 60)
legend("topleft", c("EMA-S", "EMA-L"), col=c("red", "orange"), lwd=2)
Quotes_new$balance <- ( Quotes_new$papers - Quotes_new$papers_credit ) *Quotes_new$close + Quotes_new$budget - Quotes_new$budget_credit
View(Quotes_new)
axis(side=1, at=vec,labels=Quotes_new[vec,1], las=2,cex.axis = 0.6,srt = 60)
legend("topleft", c("EMA-S", "EMA-L"), col=c("red", "orange"), lwd=2)
Quotes_new$budget <- Quotes_new[NROW(Quotes_new),2]*500
Quotes_new$papers <- 0
Quotes_new$budget_credit <- 0
Quotes_new$papers_credit <- 0
сredit <- 0
stocks <- 0
shallBuy <- FALSE
if (Quotes_new[initx,6] < Quotes_new[initx,7]) shallBuy <-TRUE
for (i in 1:NROW(intersections) )
{
index <- intersections[i]
if (shallBuy){
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers <- ( 0.9992 * budget * 2 ) %/% price
payment <- papers * price * 1.0008
budget <- budget - payment/2
budget_credit <- budget_credit + payment / 2
papers <- papers - papers_credit
papers_credit <- 0
# вот тут мы покупаем что-то на наши средства
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- FALSE
}else{
price <- Quotes_new[index,2]
budget <-  Quotes_new[index,8]
papers <- Quotes_new[index,9]
budget_credit <- Quotes_new[index,10]
papers_credit <- Quotes_new[index,11]
papers_credit <- papers_credit + papers
budget <- papers * 2 * price * 0.9992 + budget - budget_credit
budget_credit <- 0
papers <- 0
Quotes_new[((index+1):(NROW(Quotes_new))),8]<-budget
Quotes_new[((index+1):(NROW(Quotes_new))),9]<-papers
Quotes_new[((index+1):(NROW(Quotes_new))),10] <- budget_credit
Quotes_new[((index+1):(NROW(Quotes_new))),11] <- papers_credit
shallBuy <- TRUE
}
}
axis(side=1, at=vec,labels=Quotes_new[vec,1], las=2,cex.axis = 0.6,srt = 60)
Quotes_new$balance <- ( Quotes_new$papers - Quotes_new$papers_credit ) *Quotes_new$close + Quotes_new$budget - Quotes_new$budget_credit
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
rmarkdown::render("trading_oracle_nasdaq.Rmd")
