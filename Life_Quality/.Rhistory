#install.packages("ggplot2", dependencies = TRUE)
library("ggplot2")
#install.packages("Hmisc", dependencies = TRUE)
library(Hmisc)
Sys.setenv(LANG = "en")
#Read data from file:
data <- read.csv(file="data.csv", header = TRUE, sep = ";", dec=",")
colnames(data) <- c('Country','Quality','Education','Life_duration','STEM','Development','Corruption','Unity','Safety','Brain_loss','GDP','Effectiveness','Consumption','Real_GDP_Growth','Finance','Drugs_alcohol','Crimes','Education_spends','Research_Development','Service','Illiteracy','Inflation','Unemployment','CO2','IT')
data = data[c(-19, -22, -24),]
data <- read.csv(file="data.csv", header = TRUE, sep = ";", dec=",")
setwd("~/Documents/GIT/R/Life_Quality")
data <- read.csv(file="data.csv", header = TRUE, sep = ";", dec=",")
data <- read.csv(file="data.csv", header = FALSE, sep = ";", dec=",")
data
#install.packages("ggplot2", dependencies = TRUE)
data <- read.csv(file="data.csv", header = TRUE, sep = ";", dec=",")
#install.packages("ggplot2", dependencies = TRUE)
library("ggplot2")
#install.packages("Hmisc", dependencies = TRUE)
library(Hmisc)
Sys.setenv(LANG = "en")
#Read data from file:
data <- read.csv(file="data.csv", header = TRUE, sep = ";", dec=",")
colnames(data) <- c('Country','Quality','Education','Life_duration','STEM','Development','Corruption','Unity','Safety','Brain_loss','GDP','Effectiveness','Consumption','Real_GDP_Growth','Finance','Drugs_alcohol','Crimes','Education_spends','Research_Development','Service','Illiteracy','Inflation','Unemployment','CO2','IT')
data = data[c(-19, -22, -24),]
for(i in 2:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
str(data)
names(data)
summary(data)
hist(data$Quality)
qplot(data$Quality, data$Education, xlab = "Quality", ylab = "Education", main = "Dependency of Quality from Education")
qplot(data$Quality, data$Life_duration, xlab = "Quality", ylab = "Life_duration", main = "Dependency of Quality from Life_duration")
#Pair regressions models
data_reg <- lm(Quality ~ GDP, data = data)
data_reg <- lm(Quality ~ Consumption, data = data)
data_reg <- lm(Quality ~ Illiteracy, data = data)
data_reg <- lm(Quality ~ Research_Development, data = data)
data_reg <- lm(Quality ~ Crimes, data = data)
data_reg <- lm(Quality ~ Life_duration, data = data)
data_reg <- lm(Quality ~ CO2, data = data)
data_reg <- lm(Quality ~ Consumption + GDP + Life_duration + CO2 + Research_Development + Illiteracy + Crimes, data = data)
#Main features of regression
summary(data_reg)
plot(data_reg)
{
#Ininial matrix
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
#Levels of significance
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
#Rounding for 2 symbols
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
#Building matrix
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
#Delete 1 triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
#Return of matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
#Subset of 7 variables for Pearson correlation matrix:
x <- subset(data, select = c("Quality","Consumption","Life_duration","CO2","Research_Development","Illiteracy","Crimes"));
#Matrix
corstarsl(data.matrix(x));
#Final regression
data_reg <- lm(Quality ~ Consumption + Life_duration + CO2 + Research_Development + Illiteracy + Crimes, data = data)
summary(data_reg)
plot(data_reg)
library(car)
library(car)
library(lmtest)
install.packages("lmtest")
dwtest(data_reg)
library(lmtest)
dwtest(data_reg)
data <- read.csv(file="Exel.csv", header = TRUE, sep = ";", dec=",")
setwd("~/Documents/GIT/R/Life_Quality")
data <- read.csv(file="Excel.csv", header = TRUE, sep = ";", dec=",")
View(data)
data <- read.csv(file="Excel.csv", header = FALSE, sep = ";", dec=",")
View(data)
colnames(data) <- c('Year','Y','F','Z','L','I','P')
View(data)
data(mtcars)
data(mtcars)
mtcars
train <- mtcars[train_ind, ]
train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size)
xts(data$Year, as.Date(data$Year, format='/%Y')
xts(data$Year, as.Date(data$Year, format='/%Y'))
train <- subset(data, data[,"Year"]>=1990)
View(train)
train <- subset(data, data[,"Year"]>=2000)
View(train)
train <- subset(data, data[,"Year"]<=2007)
test <- subset(data, data[,"Year"]>=2007)
test <- subset(data, data[,"Year"]>=2008)
View(test)
View(data)
View(data)
data$new <- data$Y/data$L
View(data)
data$new2 <- (data$Z*data$F)/data$L
View(data)
data$lnnew <- ln(data$Y/data$L)
data$lnnew <- log10(data$Y/data$L)
data$lnnew2 <- log10((data$Z*data$F)/data$L)
View(data)
data$lnA <- ln(A)
View(data)
data$lnA <- log10(A)
data$lnA <- log10(data$A)
View(data)
data_reg <- lm(data$lnnew ~ data$lnnew2, data = data)
summary(data_reg)
data_reg <- lm(ln(data$new) ~ ln(data$new2), data = data)
data_reg <- lm(l0g10(data$new) ~ log10(data$new2), data = data)
data_reg <- lm(log10(data$new) ~ log10(data$new2), data = data)
summary(data_reg)
summary(data_reg)
A <- 10^(-3.7070)
B <= 10^ (1.1969)
B <- 10^(1.1969)
data$new <- data$Y/data$L
data <- read.csv(file="Excel.csv", header = FALSE, sep = ";", dec=",")
colnames(data) <- c('Year','Y','F','Z','L','I','P')
data$new <- data$Y/data$L
data$new2 <- (data$Z*data$F)/data$L
train <- subset(data, data[,"Year"]<=2007)
test <- subset(data, data[,"Year"]>=2008)
rm(mtcars)
rm(x)
data_reg <- lm(log10(data$new) ~ log10(data$new2), data = train)
data_reg <- lm(log10(train$new) ~ log10(train$new2), data = train)
summary(data_reg)
A <- 10^(-3.5227)
B <- 10^(1.0487)
View(train)
View(test)
test$Y <- A*L*(((Z*F)/L)^B)
View(train)
View(train)
test$Yl <- A*test$L*(((test$Z*test$F)/test$L)^B)
View(train)
View(test)
data_reg <- lm(train$Y ~ train$F + train$Z + train$L + train$I + train$P, data = train)
summary(data_reg)
test$pred <- predict(data_reg, test)
View(test)
data <- read.csv(file="Excel.csv", header = FALSE, sep = ";", dec=",")
colnames(data) <- c('Year','Y','F','Z','L','I','P')
data$new <- data$Y/data$L
data$new2 <- (data$Z*data$F)/data$L
train <- subset(data, data[,"Year"]<=2007)
test <- subset(data, data[,"Year"]>=2008)
data_reg <- lm(train$Y ~ train$F + train$Z + train$L + train$I + train$P, data = train)
test$pred <- predict(data_reg, test)
View(test)
View(train)
lm_predicted <- predict(data_reg, test)
lm_predicted <- predict(test, data_reg)
tast$pred <- predict(test, data_reg)
predicted <- predict(data_reg,test,type = "response")
data_reg <- lm(Y ~ F + Z + L + I + P, data = train)
summary(data_reg)
data_reg <- lm(Y ~ F + Z + L + I, data = train)
data_reg <- lm(Y ~ F + Z + L + I, data = train)
summary(data_reg)
predicted <- predict(data_reg,test,type = "response")
test$pred <- predict(data_reg,test,type = "response")
View(test)
data_reg <- lm(Y ~ F + Z + L + I, data = train)
summary(data_reg)
test$pred <- predict(data_reg,test,type = "response")
View(test)
test$APE <- abs(test$Y - test$pred)
View(test)
test$APE <- (abs(test$Y - test$pred))/test$Y*100
View(test)
ggplot(test, aes(Year)) + xlab(Y) )
ggplot(test, aes(Year) + xlab(Y) )
ggplot(test, aes(pred + Year) + xlab(Y) )
ggplot(test, aes(y = APE, x = Year) + xlab(Y) )
ggplot(test, aes(y = APE, x = Year))
library("ggplot2")
ggplot(test, aes(y = APE, x = Year))
test$pred <- predict(data_reg,test,type = "response")
test$APE <- (abs(test$Y - test$pred))/test$Y*100
ggplot(test, aes(y = APE, x = Year))
plot(as.Date(test$Year),test$APE)
dwtest(data_reg)
x = c(5, 8, 6, 5, 3, 9, 12, 4, 3, 10)
y = c(72, 76, 78, 70, 68, 80, 82, 65, 62, 90)
df = data.frame(x, y)
reg <- lm(y ~ x, data = df)
summary(reg)
x1 = c(10, 15, 20, 25, 40, 37, 43, 35, 40, 55)
x1 = c(12, 10, 9, 9, 8, 8, 6, 4, 4, 5)
y = c(20, 35, 30, 45, 60, 70, 75, 90, 105, 110)
df2 = data.frame(x1, x2, y)
reg2 <- lm(y ~ x1 + x2, data = df2)
summary(reg2)
x1 = c(10, 15, 20, 25, 40, 37, 43, 35, 40, 55)
x1 = c(12, 10, 9, 9, 8, 8, 6, 4, 4, 5)
y = c(20, 35, 30, 45, 60, 70, 75, 90, 105, 110)
df2 = data.frame(x1, x2, y)
x1 = c(10, 15, 20, 25, 40, 37, 43, 35, 40, 55)
x2 = c(12, 10, 9, 9, 8, 8, 6, 4, 4, 5)
y = c(20, 35, 30, 45, 60, 70, 75, 90, 105, 110)
df2 = data.frame(x1, x2, y)
reg2 <- lm(y ~ x1 + x2, data = df2)
summary(reg2)
#Pearson correlation coefficient matrix:
corstarsl <- function(x)
{
#Ininial matrix
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
#Levels of significance
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
#Rounding for 2 symbols
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
#Building matrix
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
#Delete 1 triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
#Return of matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
corstarsl(data.matrix(df));
corstarsl(data.matrix(df2));
x = c(5, 8, 6, 5, 3, 9, 12, 4, 3, 10)
y = c(72, 76, 78, 70, 68, 80, 82, 65, 62, 90)
df = data.frame(x, y)
reg <- lm(y ~ x, data = df)
summary(reg)
plot(data_reg)
data <- read.csv(file="Excel.csv", header = FALSE, sep = ";", dec=",")
colnames(data) <- c('Year','Y','F','Z','L','I','P')
data$new <- data$Y/data$L
data$new2 <- (data$Z*data$F)/data$L
train <- subset(data, data[,"Year"]<=2007)
test <- subset(data, data[,"Year"]>=2008)
data_reg <- lm(log10(train$new) ~ log10(train$new2), data = train)
summary(data_reg)
A <- 10^(-3.5227)
B <- 10^(1.0487)
test$Yl <- A*test$L*(((test$Z*test$F)/test$L)^B)
data_reg <- lm(Y ~ F + Z + L + I, data = train)
summary(data_reg)
test$pred <- predict(data_reg,test,type = "response")
test$APE <- (abs(test$Y - test$pred))/test$Y*100
plot(as.Date(test$Year),test$APE)
#DW test - положительная автокорреляция
dwtest(data_reg)
x = c(5, 8, 6, 5, 3, 9, 12, 4, 3, 10)
y = c(72, 76, 78, 70, 68, 80, 82, 65, 62, 90)
df = data.frame(x, y)
reg <- lm(y ~ x, data = df)
#DW test - положительная автокорреляция
dwtest(data_reg)
View(test)
x1 = c(10, 15, 20, 25, 40, 37, 43, 35, 40, 55)
x2 = c(12, 10, 9, 9, 8, 8, 6, 4, 4, 5)
y = c(20, 35, 30, 45, 60, 70, 75, 90, 105, 110)
df2 = data.frame(x1, x2, y)
reg2 <- lm(y ~ x1 + x2, data = df2)
summary(reg2)
