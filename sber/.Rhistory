?rnorm
help.search("rmorm")
args("rnorm")
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
(z, 555, z)
(z,555,z)
(z 555 z)
(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- (z/my_sqrt)
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 1000)
(z * 2 + 1000)
info()
(z * 2 + 1000)
main()
z * 2 + 1000
my_div
swirl()
1:20
pi:10
15:1
':'
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each
| = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Kate")
my_name]
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = "")
paste(c(1:3), c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
y
z <- rep(NA, 1000)
y_data <- sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
c(3, 5, 7)
[c(3, 5, 7)]
v <- c(3, 5, 7)
m <- c(3, 5, 7)
a <- c(3, 5, 7)
[f]
[a]
c[3, 5, 7]
c
x[c(3, 5, 7)]
x (i.e. x[0])
i.e. x[0]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:3
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
v
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
View(my_matrix)
View(my_matrix)
View(my_matrix)
View(my_vector)
View(my_vector)
my_matrix2 <- matrix(1:20, (dim(my_vector) <- c(4, 5))
0.3 - 0.2 - 0.1
0.3 - 0.2 - 0.1 < 0
setwd("~/Documents/GIT/R/sber")
bankruptcy <- read.csv(file="Xtrain.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
View(bankruptcy)
bankruptcy <- read.csv(file="Xtrain.csv",stringsAsFactors = FALSE, header=TRUE, sep=",", dec= ".")
View(bankruptcy)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = FALSE, header=TRUE, sep=",", dec= ".")
View(data)
summary(data)
data$create <- as.Date(data$ts_create)
hist(data$product_id)
data$product_id <- as.Date(data$product_id)
data$product_id <- as.factor(data$product_id)
summary(data)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
summary(data)
data$product_id <- as.factor(data$product_id)
data$ts_create <- as.factor(data$ts_create)
data$ts_update <- as.factor(data$ts_update)
data$bank_id <- as.factor(data$bank_id)
data$address_id <- as.factor(data$address_id)
data$company_id <- as.factor(data$company_id)
data$agent_id <- as.factor(data$agent_id)
data$email_agent_id <- as.factor(data$email_agent_id)
data$phone_agent_id <- as.factor(data$phone_agent_id)
data$direction_id <- as.factor(data$direction_id)
data$partner_company_id <- as.factor(data$partner_company_id)
data$online_id <- as.factor(data$online_id)
data$channel_id <- as.factor(data$channel_id)
data$source_id <- as.factor(data$source_id)
data$system_id <- as.factor(data$system_id)
summary(data)
data$status <- as.factor(data$status)
summary(data)
data2 <- read.csv(file="Xtest.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
View(data2)
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
View(data2)
summary(data2)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
View(data2)
data <- cbind(data, data2)
View(data)
rm(data2)
data$product_id <- as.factor(data$product_id)
data$ts_create <- as.factor(data$ts_create)
data$ts_update <- as.factor(data$ts_update)
data$bank_id <- as.factor(data$bank_id)
data$status <- as.factor(data$status)
data$address_id <- as.factor(data$address_id)
data$company_id <- as.factor(data$company_id)
data$agent_id <- as.factor(data$agent_id)
data$email_agent_id <- as.factor(data$email_agent_id)
data$phone_agent_id <- as.factor(data$phone_agent_id)
data$direction_id <- as.factor(data$direction_id)
data$partner_company_id <- as.factor(data$partner_company_id)
data$online_id <- as.factor(data$online_id)
data$channel_id <- as.factor(data$channel_id)
data$source_id <- as.factor(data$source_id)
data$system_id <- as.factor(data$system_id)
summary(data)
data$target <- as.factor(data$target)
summary(data)
summary(data)
boxplot(target ~ product_id, data = data, main = "Car Milage Data")
hist(data$v)
hist(data$product_id)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
hist(data$product_id)
hist(data$ts_create)
hist(data$ts_update)
hist(data$bank_id])
hist(data$bank_id)
hist(data$status)
hist(data$address_id)
hist(data$company_id)
hist(data$agent_id)
hist(data$email_agent_id)
hist(data$phone_agent_id)
hist(data$direction_id)
boxplot(target ~ product_id, data = data, main = "Car Milage Data")
boxplot(target ~ ts_create, data = data, main = "Car Milage Data")
boxplot(target ~ ts_create, data = data, main = "Car Milage Data")
boxplot(target ~ partner_company_id, data = data, main = "Car Milage Data")
boxplot(partner_company_id ~ target, data = data)
boxplot(product_id ~ target, data = data)
boxplot(product_id)
boxplot(data$product_id)
boxplot(data$bank_id)
boxplot(data$status)
boxplot(data$ts_create)
boxplot(data$address_id)
boxplot(data$company_id)
boxplot(data$agent_id)
boxplot(data$email_agent_id)
boxplot(product_id ~ target, data = data)
boxplot(bank_id ~ target, data = data)
boxplot(status ~ target, data = data)
boxplot(address_id ~ target, data = data)
boxplot(company_id ~ target, data = data)
boxplot(agent_id ~ target, data = data)
boxplot(email_agent_id ~ target, data = data)
boxplot(phone_agent_id ~ target, data = data)
boxplot(direction_id ~ target, data = data)
boxplot(partner_company_id ~ target, data = data)
boxplot(online_id ~ target, data = data)
boxplot(channel_id ~ target, data = data)
boxplot(source_id ~ target, data = data)
boxplot(system_id ~ target, data = data)
boxplot(target ~ target, data = data)
hist(data$product_id)
#Функция построения матрицы Пирсона с уровнями значимости:
corstarsl <- function(x)
{
#Исходная матрица
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
#задание уровней значимости.
mystars <- ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "* ", " ")))
#Округление значений матрицы до 2 знаков после запятой
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
#Построение матрицы со значениями корреляции и уровнями значимости
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
#Удаление верхнего треугольника матрицы
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
#Удаление последней колонки ( так как она пуста ) и возврат готовой матрицы
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
#Вызов функции построения матрицы
corstarsl(data)
library("Hmisc")
#install.packages("png", dependencies=TRUE)
corstarsl(data)
corstarsl(data)
data$time <- if(data$ts_create == data$ts_update)
if(data$ts_create == data$ts_update) {data$time <- 1} else {data$time <- 0}
View(data)
for (i in nrows(data)) {if(data$ts_create == data$ts_update) {data$time <- 1} else {data$time <- 0}
#Функция построения матрицы Пирсона с уровнями значимости:
for (i in 1:nrows(data)) {
if(data$ts_create == data$ts_update) data[19,i]  <- 1
else data[19,i]  <- 0
}
for (i in 1:nrow(data)) {
if(data$ts_create == data$ts_update) data[19,i]  <- 1
else data[19,i]  <- 0
}
for (i in 1:nrow(data)) {
if(data$ts_create[[i]] == data$ts_update[[i]]) data[19,i]  <- 1
else data[19,i]  <- 0
}
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
View(data)
for (i in 1:nrow(data)) {
if(data$ts_create[[i]] == data$ts_update[[i]]) data[i,18]  <- 1
else data[i,18]  <- 0
}
View(data)
for (i in 1:nrow(data)) {
if(data$ts_create[[i]] == data$ts_update[[i]]) data[i,18]  <- 1
else data[i,18]  <- 0
}
summary(data$V8)
View(data)
for (i in 1:nrow(data)) data[i,18]  <- data$ts_update[[i]] - data$ts_create[[i]]
View(data)
summary(data$V8)
summary(data$V18)
for (i in 1:nrow(data)) {
if(data$ts_create[[i]] == data$ts_update[[i]]) data[19,i]  <- 1
else data[19,i]  <- 0
}
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
for (i in 1:nrow(data)) data[i,18]  <- data$ts_update[[i]] - data$ts_create[[i]]
for (i in 1:nrow(data)) {
if(data$ts_create[[i]] == data$ts_update[[i]]) data[i,19]  <- 1
else data[i,19]  <- 0
}
summary(data$V18)
View(data)
summary(data$V19)
View(data)
data <- data[ which(data$V18 < 0 ), ]
View(data)
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
for (i in 1:nrow(data)) data[i,18]  <- data$ts_update[[i]] - data$ts_create[[i]]
data <- data[ which(data$V18 > 0 ), ]
View(data)
summary(data)
control <- read.csv(file="Xtest.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
View(control)
summary(con)
summary(control)
# if you see KRAKOZYABRY then do
# "File" - "Reopen with encoding" - "UTF-8" - (Set as default) - OK
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#install.packages("C50", dependencies = TRUE)
library("C50")
#install.packages("neuralnet", dependencies = TRUE)
library("neuralnet")
#install.packages("knitr", dependencies = TRUE)
library("knitr")
install.packages("ROCR", dependencies = TRUE)
library("ROCR")
#install.packages("Hmisc", dependencies = TRUE)
library("Hmisc")
#install.packages("png", dependencies=TRUE)
library("png")
#install.packages("grid", dependencies=TRUE)
library("grid")
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
control <- read.csv(file="Xtest.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data$product_id <- as.factor(data$product_id)
data$ts_create <- as.factor(data$ts_create)
data$ts_update <- as.factor(data$ts_update)
data$bank_id <- as.factor(data$bank_id)
data$status <- as.factor(data$status)
data$address_id <- as.factor(data$address_id)
data$company_id <- as.factor(data$company_id)
data$agent_id <- as.factor(data$agent_id)
data$email_agent_id <- as.factor(data$email_agent_id)
data$phone_agent_id <- as.factor(data$phone_agent_id)
data$direction_id <- as.factor(data$direction_id)
data$partner_company_id <- as.factor(data$partner_company_id)
data$online_id <- as.factor(data$online_id)
data$channel_id <- as.factor(data$channel_id)
data$source_id <- as.factor(data$source_id)
data$system_id <- as.factor(data$system_id)
data$target <- as.factor(data$target)
rversion
R.version
install.packages("installr")
library("installr")
updateR()
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
fit <- princomp(data, cor=TRUE)
# if you see KRAKOZYABRY then do
# "File" - "Reopen with encoding" - "UTF-8" - (Set as default) - OK
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#install.packages("C50", dependencies = TRUE)
library("C50")
#install.packages("neuralnet", dependencies = TRUE)
library("neuralnet")
#install.packages("knitr", dependencies = TRUE)
library("knitr")
#install.packages("ROCR", dependencies = TRUE)
library("ROCR")
#install.packages("Hmisc", dependencies = TRUE)
library("Hmisc")
#install.packages("png", dependencies=TRUE)
library("png")
#install.packages("grid", dependencies=TRUE)
library("grid")
data <- read.csv(file="Xtrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data2 <- read.csv(file="Ytrain.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data <- cbind(data, data2)
rm(data2)
control <- read.csv(file="Xtest.csv",stringsAsFactors = TRUE, header=TRUE, sep=",", dec= ".")
data$product_id <- as.factor(data$product_id)
data$ts_create <- as.factor(data$ts_create)
data$ts_update <- as.factor(data$ts_update)
data$bank_id <- as.factor(data$bank_id)
data$status <- as.factor(data$status)
data$address_id <- as.factor(data$address_id)
data$company_id <- as.factor(data$company_id)
data$agent_id <- as.factor(data$agent_id)
data$email_agent_id <- as.factor(data$email_agent_id)
data$phone_agent_id <- as.factor(data$phone_agent_id)
data$direction_id <- as.factor(data$direction_id)
data$partner_company_id <- as.factor(data$partner_company_id)
data$online_id <- as.factor(data$online_id)
data$channel_id <- as.factor(data$channel_id)
data$source_id <- as.factor(data$source_id)
data$system_id <- as.factor(data$system_id)
data$target <- as.factor(data$target)
fit <- princomp(data, cor=TRUE)
fit <- princomp(data, cor=TRUE, scores = TRUE)
fit <- prcomp(data, scale = FALSE)
