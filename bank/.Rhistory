source('C:/Users/Екатерина/Desktop/install_all.R', echo=TRUE)
Sys.setenv(LANG = "en")
install.packages("ISLR")
library("ISLR")
install.packages("tree")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree - cv.tree(tree_model, FUN = prune.misclass)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev)
plot(cv_tree$size,cv_tree$dev, type = "b")
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <= prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
text(pruned_model, pretty=0)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
setwd("~/GitHub/R/bank")
Sys.setenv(LANG = "en")
list.files()
setwd("~/GitHub/R/bank")
setwd("~/GitHub/R/bank")
setwd("C:/Users/Екатерина/Documents/GitHub/R/bank")
bankruptcy <- read.csv(file="Предприятия-А.csv", header=TRUE, sep=";")
View(bankruptcy)
View(bankruptcy)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
View(bankruptcy)
View(bankruptcy)
View(bankruptcy)
View(bankruptcy)
new <- bankruptcy[bankruptcy$Банкротство == 1,]
View(new)
View(new)
bankruptcy[bankruptcy$Банкротство == 1,]
newdata <- bankruptcy[ which(bankruptcy$Банктротство=='1', ]
newdata <- bankruptcy[ which(bankruptcy$Банктротство=='1',) ]
View(newdata)
View(newdata)
View(newdata)
View(newdata)
View(newdata)
View(newdata)
newdata <- bankruptcy[which(bankruptcy$Банктротство=='1', .)]
newdata <- subset(bankruptcy,bankruptcy$Банктротство=='1',
select=c(ID,	Ликвидность.активов,	Рентабельность.активов,	Доходность.активов,	Автономность,	Оборачиваемость.активов,	Банкрот))
View(newdata)
View(newdata)
newdata <- subset(bankruptcy,Банктротство ==1,
select=c(ID,	Ликвидность.активов,	Рентабельность.активов,	Доходность.активов,	Автономность,	Оборачиваемость.активов,	Банкрот))
newdata <- subset(bankruptcy,bankruptcy$Банктротство =='0',
select=c(ID,	Ликвидность.активов,	Рентабельность.активов,	Доходность.активов,	Автономность,	Оборачиваемость.активов,	Банкрот))
newdata <- subset(bankruptcy,which(bankruptcy$Банктротство=='1',),
select=c(ID,	Ликвидность.активов,	Рентабельность.активов,	Доходность.активов,	Автономность,	Оборачиваемость.активов,	Банкрот))
newdata <- subset(bankruptcy,which(bankruptcy$Банктротство=="1",),
select=c(ID,	Ликвидность.активов,	Рентабельность.активов,	Доходность.активов,	Автономность,	Оборачиваемость.активов,	Банкрот))
newdata <- subset(bankruptcy, bankruptcy$Банктротство=="1",
select=ID:Банкрот)
View(newdata)
View(newdata)
install.packages("sampling")
library("sampling")
install.packages("BalancedSampling")
library("BalancedSampling ")
library("BalancedSampling")
N = 10000000; # population size
n = 100; # sample size
p = rep(n/N,N); # inclusion probabilities
X = cbind(p,runif(N),runif(N),runif(N)); # matrix of 3 auxiliary variables
View(X)
View(X)
View(X)
View(X)
N = 1000 # population size
n = 100 # sample size
p = rep(n/N,N) # inclusion probabilities
X = cbind(p,runif(N),runif(N),runif(N)) # matrix of 3 auxiliary variables
system.time(cube(p,X))
View(X)
View(X)
N = 1000 # population size
n = 100 # sample size
p = rep(n/N,N) # inclusion probabilities
library(BalancedSampling)
N = 1000 # population size
n = 100 # sample size
p = rep(n/N,N) # inclusion probabilities
X = cbind(p,runif(N),runif(N),runif(N)) # matrix of 3 auxiliary variables
View(X)
View(X)
system.time(cube(p,X))
X=cbind(c(1,1,1,1,1,1,1,1,1),c(1.1,2.2,3.1,4.2,5.1,6.3,7.1,8.1,9.1))
# vector of inclusion probabilities
# the sample size is 3.
pik=c(1/3,1/3,1/3,1/3,1/3,1/3,1/3,1/3,1/3)
# selection of the sample
s=samplecube(X,pik,order=1,comment=TRUE)
# The selected sample
(1:length(pik))[s==1]
ind1 <- which(bankruptcy[,"Банкротство"]==1)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
ind1 <- which(bankr
ind1 <- which(bankr
ind1 <- which(bankruptcy[,"Банкротство"]==1)
ind0 <- which(bankruptcy[,"Банкротство"]==0)
ind1 <- which(bankruptcy[,"Банкрот"]==1)
ind0 <- which(bankruptcy[,"Банкрот"]==0)
sampind1 <- sample(ind1, 53, replace = TRUE)
sampind0 <- sample(ind0, 158, replace = TRUE)
ind0 <- bankruptcy[which(bankruptcy[,"Банкрот"]==0)]
newdata <- subset(bankruptcy, "Банкрот", select=ID : Банкрот)
newdata <- subset(bankruptcy, "Банкрот" == 1, select=ID : Банкрот)
newdata <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
View(newdata)
View(newdata)
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- sample(ind1, 53, replace = TRUE)
sampind0 <- sample(ind0, 158, replace = TRUE)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- sample(ind1, 53, replace = TRUE)
View(sampind1)
View(sampind1)
sampind1 <- sample(ind1, 53, replace = FALSE)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- sample(ind1, 53, replace = FALSE)
sampind0 <- sample(ind0, 158, replace = TRUE)
sampind1 <- sample(ind1, 53, replace = FALSE)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
sampind <- c(sampind1,sampind2)
View(sampind0)
View(sampind0)
Z<- merge(sampind1,sampind0,by="ID")
View(Z)
Z<- merge(sampind1,sampind0)
View(Z)
View(Z)
rbind(sampind, sampind1)
a <- rbind(sampind, sampind1)
a <- rbind(sampind0, sampind1)
View(a)
View(a)
testing_data <- rbind(sampind0, sampind1)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- Bbankruptcy[!(bankruptcy$ID %in% training_data$ID),]
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
View(testing_data)
View(training_data)
View(sampind1)
View(testing_data)
View(training_data)
View(testing_data)
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
Sys.setenv(LANG = "en")
install.packages("BalancedSampling")
install.packages("BalancedSampling")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(indo0)
rm(ind0)
rm(ind0, ind1,sampling0, sampling1)
rm(ind0, ind1,samping0, samping1)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1,samping0, samping1)
rm(ind0, ind1,sampind0, sampind1)
rm(ind0, ind1, sampind0, sampind1, i)
ggplot(Bikes, aes(x=bankruptcy$Ликвидность.активов)) + geom_bar(stat="identity") + geom_vline(aes(xintercept=mean(bankruptcy$Ликвидность.активов), color="red", linetype="dashed", size=1))
summary(bankruptcy$Ликвидность.активов)
ggplot(Bikes, aes(x=bankruptcy$Ликвидность.активов, y=bankruptcy$Ликвидность.активов)) + geom_bar(stat="identity") + geom_vline(aes(xintercept=mean(bankruptcy$Ликвидность.активов), color="red", linetype="dashed", size=1))
library(ggplot2)
summary(bankruptcy$Ликвидность.активов)
ggplot(Bikes, aes(x=bankruptcy$Ликвидность.активов, y=bankruptcy$Ликвидность.активов)) + geom_bar(stat="identity") + geom_vline(aes(xintercept=mean(bankruptcy$Ликвидность.активов), color="red", linetype="dashed", size=1))
ggplot(bankruptcy, aes(x=bankruptcy$Ликвидность.активов, y=bankruptcy$Ликвидность.активов)) + geom_bar(stat="identity") + geom_vline(aes(xintercept=mean(bankruptcy$Ликвидность.активов), color="red", linetype="dashed", size=1))
ggplot(bankruptcy, aes(x=bankruptcy$Ликвидность.активов, y=bankruptcy$Рентабельность.активов)) + geom_bar(stat="identity") + geom_vline(aes(xintercept=mean(bankruptcy$Ликвидность.активов), color="red", linetype="dashed", size=1))
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность.активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов"):
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность.активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность.активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
View(bankruptcy)
View(bankruptcy)
summary(Банкрот <- rlm(cnt ~ ., data = training_data))
summary(a <- rlm(cnt ~ ., data = training_data))
install.packages("foreign")
install.packages("foreign")
library("foreign")
summary(a <- rlm(cnt ~ ., data = training_data))
install.packages("MASS")
install.packages("MASS")
library("MASS")
install.packages("BalancedSampling")
library("BalancedSampling")
library(ggplot2)
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
summary(bankruptcy$Ликвидность.активов)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
summary(a <- rlm(cnt ~ ., data = training_data))
install.packages("MASS")
install.packages("MASS")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
summary(bankruptcy$Ликвидность.активов)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
summary(a <- rlm(cnt ~ ., data = training_data))
gorilla = data.frame(rep(c(0,1),c(30,19)),
c(126,118,61,69,57,78,114,81,73,93,116,156,90,120,99,113,103,123,
89,108,88,116,100,99,93,100,110,100,106,115,120,97),
c(86,76,66,48,59,64,61,85,57,50,92,70,66,73,68,110,78,61,65,
77,77,74,100,89,61,55,92,90,85,78,66,78,84,63,65,71,46,70,
c(64,54,44,32,42,53,41,47,33,45,49,45,48,49,44,47,52,28,42,51,54,
62,56,36,49,66,54,41))
colnames(gorilla) = c("seen","W","C","CW")
53,56,56,37,36,51,52,45,51,48,55,37,46,47,49,29,49,67,39,43,36,
83,69,70,63,93,76,83,71,112,87,82),
86,99,102,120,128,100,95,80,98,111,101,102,100,112,82,72,72,
str(gorilla)
glm.out = glm(Банкрот ~ ., family=binomial(logit), data=bankruptcy)
glm.out = glm(Банкрот ~ ., family = "binomial", data=bankruptcy)
Sys.setenv(LANG = "en")
glm.out = glm(Банкрот ~ ., family = "binomial", data=bankruptcy)
summary(glm.out)
glm.out = glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Автономность + Оборачиваемость.активов, family = "binomial", data=bankruptcy)
summary(glm.out)
exp(glm.out$coefficients)
install.packages(epicalc)
install.packages("epicalc")
library("epicalc")
library("epicalc", dependencies=TRUE)
install.packages("epicalc", dependencies=TRUE)
install.packages("epicalc", dependencies = TRUE)
library("epicalc")
Sys.setenv(LANG = "en")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("MASS")
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
summary(bankruptcy$Ликвидность.активов)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
glm.out = glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Автономность + Оборачиваемость.активов, family = "binomial", data=bankruptcy)
summary(glm.out)
qplot(complexity, as.numeric(chosen)-1, data=training_data, facets=task_type~.,fun.y="mean",stat="summary")+
stat_smooth(method="glm",family="binomial", formula = y ~ ns(x, 2)) + theme_bw()
logistic.display(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Автономность + Оборачиваемость.активов, family=binomial), decimal=1)
logistic.display(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Автономность + Оборачиваемость.активов, family=binomial), decimal=1, data=bankruptcy)
logistic.display(glm(bankruptcy$Банкрот ~ bankruptcy$Ликвидность.активов + bankruptcy$Рентабельность.активов + bankruptcy$Доходность.активов + bankruptcy$Автономность + bankruptcy$Оборачиваемость.активов, family=binomial), decimal=1)
summary(glm.out)
testing_data$predicted_value <- predict(glm.out, newdata = testing_data, type = "response")
View(testing_data)
View(testing_data)
glm.out = glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Автономность + Оборачиваемость.активов, family = "binomial", data=training_data)
summary(glm.out)
logistic.display(glm(training_data$Банкрот ~ training_data$Ликвидность.активов + training_data$Рентабельность.активов + training_data$Доходность.активов + training_data$Автономность + training_data$Оборачиваемость.активов, family=binomial), decimal=1)
testing_data$predicted_value <- predict(glm.out, newdata = testing_data, type = "response")
View(testing_data)
View(testing_data)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
summary(bankruptcy$Ликвидность.активов)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
range(bankruptcy$Ликвидность.активов)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
range(bankruptcy$Доходность.активов)
range(bankruptcy$Доходность.активов)
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
range(bankruptcy$Автономность)
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
range(bankruptcy$Оборачиваемость.активов)
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А — копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID : Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID : Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
summary(bankruptcy$Ликвидность.активов)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
range(bankruptcy$Рентабельность.активов)
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
bankruptcy <- read.csv(file="Предприятия-А — копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А_копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А_копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А_копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А_копия.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А_копия.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
View(bankruptcy)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
View(bankruptcy)
Sys.setenv(LANG = "en")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("MASS")
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
View(bankruptcy)
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, fileEncoding = "UTF8", header=TRUE, sep=";")
