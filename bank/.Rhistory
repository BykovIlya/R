boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  clear_test)
summary(reg_tree_c50)
View(testing_data)
install.packages("neuralnet", dependencies = TRUE)
library("neuralnet")
View(clear_test)
View(clear_test)
nn <- neuralnet(Банкрот ~ ., data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
View(clear_test)
View(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
plot(nn)
training_data$Банкрот <- as.integer(training_data$Банкрот)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
plot(nn)
testing_data$predicted_value_nn <- prediction(reg_tree_c50,  clear_test)
testing_data$predicted_value_nn <- compute(nn,  clear_test$Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
testing_data$predicted_value_nn <- compute(nn,  clear_test$Банкрот)
View(clear_test)
View(clear_test)
testing_data$predicted_value_nn <- compute(nn,  clear_test[, 1:5])
View(testing_data)
View(testing_data)
View(clear_test)
View(clear_test)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
plot(nn)
testing_data$predicted_value_nn <- compute(nn,  clear_test[, 1:5])
View(testing_data)
View(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full", linear.output=TRUE)
plot(nn)
testing_data$predicted_value_nn <- compute(nn,  clear_test[, 1:5])
testing_data$predicted_value_nn <- compute(nn,  clear_test[, 1:5])
View(testing_data)
View(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full", linear.output=FALSE)
plot(nn)
testing_data$predicted_value_nn <- compute(nn,  clear_test[, 1:5])
View(testing_data)
View(testing_data)
print(nn)
clear_test <- as.data.frame(clear_test)
testing_data$predicted_value_nn
View(clear_test)
View(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 5, stepmax = 2e05, threshold = 0.02, lifesign = "full")
plot(nn)
print(nn)
testing_data$predicted_value_nn
clear_test$net.results <- compute(nn,  clear_test[, 1:5])
View(clear_test)
View(clear_test)
ls(clear_test$net.results)
View(clear_test)
View(clear_test)
print(clear_test$net.results)
testing_data$predicted_value_nn <- clear_test$net.results
View(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, threshold = 0.02, linear.output = FALSE, lifesign = "minimal")
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, threshold = 0.02, linear.output = FALSE, lifesign = "minimal")
plot(nnrep = "best")
plot(nn, rep = "best")
View(clear_test)
View(clear_test)
clear_test$net.results <- compute(nn,  clear_test[, 1:5])
View(clear_test)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
clear_test$net.results <- compute(nn,  clear_test)
View(clear_test)
View(clear_test)
View(testing_data)
testing_data$net.results <- compute(nn,  testing_data[, 2:6])
View(testing_data)
head(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = clear_test, hidden = 6, stepmax = 2e05, threshold = 0.02, linear.output = TRUE, lifesign = "minimal")
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, threshold = 0.02, linear.output = TRUE, lifesign = "minimal")
plot(nn, rep = "best")
print(nn)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
testing_data$predicted_value_nn <- compute(nn,  testing_data[, 2:6])
View(testing_data)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, threshold = 0.02, linear.output = TRUE, lifesign = "minimal")
plot(nn, rep = "best")
print(nn)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
testing_data$predicted_value_nn <- compute(nn,  clear_test)
head(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal")
plot(nn, rep = "best")
print(nn)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
testing_data$predicted_value_nn <- compute(nn,  clear_test)
head(testing_data)
View(testing_data)
View(testing_data)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=T)
plot(nn, rep = "best")
print(nn)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
testing_data$predicted_value_nn <- compute(nn,  clear_test)
head(testing_data)
testing_data$predicted_value_nn <- lapply(mean(testing_data$predicted_value_nn))
testing_data$predicted_value_nn <- lapply(testing_data$predicted_value_nn, mean)
View(testing_data)
View(testing_data)
testing_data$net.result
cleanoutput <- cbind(clear_test,sqrt(testdata),
as.data.frame(clear_test$net.result))
cleanoutput <- cbind(clear_test,sqrt(clear_test),
as.data.frame(clear_test$net.result))
install.packages("knitr", dependencies = TRUE)
library("knitr")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
View(bankruptcy)
View(bankruptcy)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
View(bankruptcy)
View(bankruptcy)
install.packages("xtable", dependencies = TRUE)
library("xtable")
mtable()
install.packages("memisc", dependencies = TRUE)
library("memisc")
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
#Округлим полученные значения
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
testing_data$predicted_value_regtreeс50 <- predict(reg_tree_c50,  clear_test)
summary(reg_tree_c50)
#Нейронная сеть
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=T)
plot(nn, rep = "best")
print(nn)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
testing_data$predicted_value_nn <- compute(nn,  clear_test)
head(testing_data)
testing_data$predicted_value_nn <- lapply(testing_data$predicted_value_nn, mean)
mtable()
mtable(fit, glm.out, reg_tree)
mtable(fit, glm.out)
setwd("~/GitHub/R/bank")
setwd("C:/Users/Екатерина/Documents/GitHub/R/bank")
rmarkdown::render("reg_tree_neural.Rmd")
rmarkdown::render("reg_tree_neural.Rmd")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "pdf_document")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "pdf_document")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "цщкв_document")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
install.packages("pander", dependencies = TRUE)
library("pander")
pander(summary(bankruptcy))
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
View(bankruptcy)
View(bankruptcy)
View(bankruptcy)
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания")
pairs(Банкрот + Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания")
rmarkdown::render("reg_tree_neural.Rmd", "all")
rmarkdown::render("reg_tree_neural.Rmd", "all")
pairs( Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
pairs(Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
rmarkdown::render("reg_tree_neural.Rmd", "all")
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов") + boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
View(bankruptcy)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов") + boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
View(clear_test)
exp(glm.out$coefficients)
exp(confint(glm.out))
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
View(clear_test)
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
rsq.rpart(reg_tree) # visualize cross-validation results
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
testing_data$predicted_value_regtreeс50 <- predict(reg_tree_c50,  clear_test)
plot(reg_tree_c50)
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
plot(reg_tree_c50)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
View(clear_test)
View(clear_test)
View(training_data)
testing_data$predicted_value_regtree <- predict(reg_tree,  clear_test, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
reg_tree <- rpart(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, data = training_data, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  clear_test, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
View(testing_data)
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
View(testing_data)
reg_tree <- rpart(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, data = training_data, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  clear_test, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
View(testing_data)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
View(testing_data)
#Метод random forests
fit <- randomForest(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, data=training_data)
fit <- randomForest(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, data=training_data)
View(testing_data)
View(training_data)
fit <- randomForest(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, data=training_data)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, clear_test, type="response" )
View(testing_data)
print(fit) # view results
plot(fit)
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
plot(reg_tree_c50)
testing_data$predicted_value_regtreeс50 <- predict(reg_tree_c50,  clear_test)
summary(reg_tree_c50)
reg_tree_c50 <- C5.0(x = clear_test, y = clear_test$Банкрот)
View(bankruptcy)
rmarkdown::render("reg_tree_neural.Rmd")
rmarkdown::render("reg_tree_neural.Rmd")
