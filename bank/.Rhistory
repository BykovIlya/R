source('C:/Users/Екатерина/Desktop/install_all.R', echo=TRUE)
Sys.setenv(LANG = "en")
install.packages("ISLR")
library("ISLR")
install.packages("tree")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree - cv.tree(tree_model, FUN = prune.misclass)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev)
plot(cv_tree$size,cv_tree$dev, type = "b")
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <= prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
text(pruned_model, pretty=0)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
setwd("~/GitHub/R/bank")
setwd("C:/Users/Екатерина/Documents/GitHub/R/bank")
#Нейронная сеть
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[-c(1,195),]
#plot(bankruptcy$Доходность.активов, bankruptcy$Рентабельность.активов)
#with(bankruptcy, text(Доходность.активов~Рентабельность.активов, labels = row.names(bankruptcy), pos = 1))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов  + Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=F)
Sys.setenv(LANG = "en")
#require(devtools)
#install.packages("base64enc")
#install_github('rCharts', 'ramnathv', ref = 'dev')
library(ggplot2)
library("MASS")
library("epicalc")
library("outliers")
library("rpart")
library("randomForest")
library("C50")
library("neuralnet")
library("knitr")
library("xtable")
library("Hmisc")
library("devtools")
library("rCharts")
library("e1071")
library("class")
## load the package
library(rCharts)
## utility function to add required assets such as CSS and JS libraries
add_lib_assets <- function(lib, cdn = F,css=NULL) {
assets = get_assets(get_lib(lib), cdn = cdn)
if(!is.null(css)){assets$css=c(assets$css,css)}
styles <- lapply(assets$css, function(style) {
sprintf("<link rel='stylesheet' href=%s>", style)
})
scripts <- lapply(assets$jshead, function(script) {
sprintf("<script type='text/javascript' src=%s></script>", script)
})
cat(paste(c(styles, scripts), collapse = "\n"))
}
# get assets from online repositories
add_lib_assets("NVD3",cdn=TRUE,css="http://rawgithub.com/ramnathv/rCharts/master/inst/libraries/nvd3/css/rNVD3.css")
add_lib_assets("Polycharts",cdn=TRUE)
#считываем данные из файла
#Нейронная сеть
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[-c(1,195),]
#plot(bankruptcy$Доходность.активов, bankruptcy$Рентабельность.активов)
#with(bankruptcy, text(Доходность.активов~Рентабельность.активов, labels = row.names(bankruptcy), pos = 1))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов  + Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=F)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
bankruptcynet.results <- compute(nn,  clear_test)
opts_chunk$set(echo=FALSE, message=FALSE)
```
opts_chunk$set(echo=FALSE, message=FALSE)
```
```{r, echo=FALSE}
plot(nn, rep = "best")
```
testing_data$prediction_nn <-  bankruptcynet.results$net.result
nn_res <- list(predictions = testing_data$prediction_nn, labels = testing_data$Банкрот)
preds <- prediction(nn_res$predictions, nn_res$labels)
perf <- performance(preds, "tpr", "fpr")
perf2 <- performance(preds, "auc")
auc <- unlist(slot(performance(preds, "auc"), "y.values"))
maxauc<-max(round(auc, digits = 2))
maxauc_nn <- maxauc
maxauct <- paste(c("max(AUC) = "),maxauc_nn,sep="")
opts_chunk$set(echo=FALSE, message=FALSE)
```
```{r, echo=FALSE}
plot(perf, main="ROC-кривая нейронной сети для тестовых данных ", lwd=2, col="pink")
abline(a=0,b=1,lwd=2,lty=2,col="gray")
legend(0.5,0.4,c(maxauct,"\n"),border="white",cex=1.1,box.col = "white")
```
В результате построения вышло, что наша модель имеет AUC равный `r maxauc_nn`.
#Нейронная сеть
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[-c(1,195),]
#plot(bankruptcy$Доходность.активов, bankruptcy$Рентабельность.активов)
#with(bankruptcy, text(Доходность.активов~Рентабельность.активов, labels = row.names(bankruptcy), pos = 1))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов  + Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=F)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
bankruptcynet.results <- compute(nn,  clear_test)
opts_chunk$set(echo=FALSE, message=FALSE)
```
```{r, echo=FALSE}
plot(nn, rep = "best")
testing_data$prediction_nn <-  bankruptcynet.results$net.result
nn_res <- list(predictions = testing_data$prediction_nn, labels = testing_data$Банкрот)
preds <- prediction(nn_res$predictions, nn_res$labels)
#Нейронная сеть
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[-c(1,195),]
#plot(bankruptcy$Доходность.активов, bankruptcy$Рентабельность.активов)
#with(bankruptcy, text(Доходность.активов~Рентабельность.активов, labels = row.names(bankruptcy), pos = 1))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов  + Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=F)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
bankruptcynet.results <- compute(nn,  clear_test)
opts_chunk$set(echo=FALSE, message=FALSE)
```
```{r, echo=FALSE}
plot(nn, rep = "best")
```
```{r, include=FALSE}
testing_data$prediction_nn <-  bankruptcynet.results$net.result
nn_res <- list(predictions = testing_data$prediction_nn, labels = testing_data$Банкрот)
preds <- prediction(nn_res$predictions, nn_res$labels)
perf <- performance(preds, "tpr", "fpr")
perf2 <- performance(preds, "auc")
auc <- unlist(slot(performance(preds, "auc"), "y.values"))
library("neuralnet")
nn_res <- list(predictions = testing_data$prediction_nn, labels = testing_data$Банкрот)
preds <- prediction(nn_res$predictions, nn_res$labels)
perf <- performance(preds, "tpr", "fpr")
perf2 <- performance(preds, "auc")
auc <- unlist(slot(performance(preds, "auc"), "y.values"))
maxauc<-max(round(auc, digits = 2))
library(ggplot2)
library("MASS")
library("epicalc")
library("outliers")
library("rpart")
library("randomForest")
library("C50")
library("neuralnet")
library("knitr")
library("xtable")
library("Hmisc")
library("devtools")
library("rCharts")
library("e1071")
library("class")
## load the package
library(rCharts)
## utility function to add required assets such as CSS and JS libraries
add_lib_assets <- function(lib, cdn = F,css=NULL) {
assets = get_assets(get_lib(lib), cdn = cdn)
if(!is.null(css)){assets$css=c(assets$css,css)}
styles <- lapply(assets$css, function(style) {
sprintf("<link rel='stylesheet' href=%s>", style)
})
scripts <- lapply(assets$jshead, function(script) {
sprintf("<script type='text/javascript' src=%s></script>", script)
})
cat(paste(c(styles, scripts), collapse = "\n"))
}
# get assets from online repositories
add_lib_assets("NVD3",cdn=TRUE,css="http://rawgithub.com/ramnathv/rCharts/master/inst/libraries/nvd3/css/rNVD3.css")
add_lib_assets("Polycharts",cdn=TRUE)
#Нейронная сеть
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[-c(1,195),]
#plot(bankruptcy$Доходность.активов, bankruptcy$Рентабельность.активов)
#with(bankruptcy, text(Доходность.активов~Рентабельность.активов, labels = row.names(bankruptcy), pos = 1))
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
clear_test$Банкрот <- as.integer(clear_test$Банкрот)
training_data$Банкрот <- as.integer(training_data$Банкрот)
clear_test <- as.data.frame(clear_test)
nn <- neuralnet(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов  + Автономность +	Оборачиваемость.активов, data = training_data, hidden = 6, stepmax = 2e05, lifesign = "minimal",linear.output=F)
clear_test <- subset(clear_test, select = c("Ликвидность.активов", "Рентабельность.активов", "Доходность.активов", "Автономность", "Оборачиваемость.активов"))
bankruptcynet.results <- compute(nn,  clear_test)
plot(nn, rep = "best")
testing_data$prediction_nn <-  bankruptcynet.results$net.result
nn_res <- list(predictions = testing_data$prediction_nn, labels = testing_data$Банкрот)
preds <- prediction(nn_res$predictions, nn_res$labels)
perf <- performance(preds, "tpr", "fpr")
perf2 <- performance(preds, "auc")
auc <- unlist(slot(performance(preds, "auc"), "y.values"))
maxauc<-max(round(auc, digits = 2))
maxauc_nn <- maxauc
maxauct <- paste(c("max(AUC) = "),maxauc_nn,sep="")
opts_chunk$set(echo=FALSE, message=FALSE)
```
```{r, echo=FALSE}
plot(perf, main="ROC-кривая нейронной сети для тестовых данных ", lwd=2, col="pink")
abline(a=0,b=1,lwd=2,lty=2,col="gray")
legend(0.5,0.4,c(maxauct,"\n"),border="white",cex=1.1,box.col = "white")
rmarkdown::render("reg_tree_neural.Rmd")
rmarkdown::render("reg_tree_neural.Rmd")
rmarkdown::render("reg_tree_neural.Rmd")
