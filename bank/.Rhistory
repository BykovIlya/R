sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
#Округлим полученные значения
exp(confint(glm.out))
testing_data$predicted_value_log <-  predict(glm.out, newdata = testing_data, type = "response")
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
reg_tree <- rpart(Банкрот ~ ., data = testing_data, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
testing_data$predicted_value_log <-  predict(glm.out, newdata = testing_data, type = "response", na.rm=T)
View(bankruptcy)
View(bankruptcy)
View(testing_data)
View(testing_data)
View(training_data)
View(training_data)
View(testing_data)
View(testing_data)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy$ID <- NULL
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=Ликвидность.активов: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=Ликвидность.активов: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
bankruptcy$ID <- NULL
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=Ликвидность.активов: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=Ликвидность.активов: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = testing_data, type = "response", na.rm=T)
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data = testing_data, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии") + text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
plot(reg_tree, uniform=TRUE, main="Дерево регрессии") + text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  Ликвидность.активов  + Рентабельность.активов  + Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data=training_data)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
View(testing_data)
View(testing_data)
install.packages("RWeka", dependencies = TRUE)
library("RWeka")
reg_tree_c45 <- J48(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data = testing_data)
install.packages(party)
install.packages("party")
library("party")
reg_tree_c45 <- J48(Банкрот ~ Ликвидность.активов  + Рентабельность.активов  + Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data = testing_data)
install.packages("C50", dependencies = TRUE)
library("C50")
data(churn)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn)
summary(treeModel)
data(churn)
View(churnTest)
View(churnTest)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn)
# if you see KRAKOZYABRY then do
# "File" - "Reopen with encoding" - "UTF-8" - (Set as default) - OK
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#install.packages("C50", dependencies = TRUE)
library("C50")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = testing_data, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ Ликвидность.активов  + Рентабельность.активов	+ Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data = testing_data, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  Ликвидность.активов  + Рентабельность.активов  + Доходность.активов	+ Автономность	+ Оборачиваемость.активов, data=training_data)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = training_data[,Ликвидность.активов:Оборачиваемость.активов], y = bankruptcy$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  testing_data[,Ликвидность.активов:Оборачиваемость.активов])
summary(reg_tree_c50)
View(training_data)
View(training_data)
reg_tree_c50 <- C5.0(y = training_data[,Ликвидность.активов:Оборачиваемость.активов], data = bankruptcy)
reg_tree_c50 <- C5.0(y = training_data$Ликвидность.активов + training_data$Рентабельность.активов +training_data$Доходность.активов +training_data$Автономность + training_data$Оборачиваемость.активов, data = bankruptcy)
View(training_data)
View(training_data)
training_data$ID <- NULL
View(training_data)
View(training_data)
reg_tree_c50 <- C5.0(y = ., data = training_data)
reg_tree_c50 <- C5.0(y ~ ., data = training_data)
library(C50)
data(churn)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn)
View(churnTrain)
View(churnTrain)
View(training_data)
View(training_data)
reg_tree_c50 <- C5.0(x = training_data[, -6], y = training_data$<Банкрот)
reg_tree_c50 <- C5.0(x = training_data[, -6], y = training_data$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  testing_data[,Ликвидность.активов:Оборачиваемость.активов])
new_test <- testing_data[,Ликвидность.активов:Оборачиваемость.активов]
View(testing_data)
View(testing_data)
View(testing_data)
View(testing_data)
new_test <- testing_data[,Ликвидность.активов:Оборачиваемость.активов]
new_test <- testing_data[,Рентабельность.активов:Оборачиваемость.активов]
new_test <- subset(testing_data, select=Рентабельность.активов:Оборачиваемость.активов)
new_test <- subset(testing_data, select=Ликвидность.активов:Оборачиваемость.активов)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  testing_data[,Ликвидность.активов:Оборачиваемость.активов])
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  new_test)
summary(reg_tree_c50)
View(testing_data)
View(testing_data)
View(new_test)
View(new_test)
View(new_test)
View(new_test)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  clear_test, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
training_data$ID <- NULL
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = training_data[, -6], y = training_data$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  new_test)
summary(reg_tree_c50)
training_data$Ликвидность.активов + training_data$Рентабельность.активов +training_data$Доходность.активов +training_data$Автономность + training_data$Оборачиваемость.активов
View(testing_data)
View(testing_data)
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
View(testing_data)
View(testing_data)
# if you see KRAKOZYABRY then do
# "File" - "Reopen with encoding" - "UTF-8" - (Set as default) - OK
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#install.packages("C50", dependencies = TRUE)
library("C50")
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
training_data$ID <- NULL
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = training_data[, -6], y = training_data$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  new_test)
summary(reg_tree_c50)
View(testing_data)
View(testing_data)
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";")
bankruptcy <- as.data.frame(sapply(bankruptcy, gsub, pattern=",",replacement="."))
for (i in 2:6) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
sampind1 <- ind1[sample(1:nrow(ind1), 53, replace=FALSE),]
sampind0 <- ind0[sample(1:nrow(ind0), 158, replace=FALSE),]
training_data <- rbind(sampind0, sampind1)
testing_data <- bankruptcy[!(bankruptcy$ID %in% training_data$ID),]
rownames(training_data)<-NULL
rownames(testing_data)<-NULL
rm(ind0, ind1, sampind0, sampind1, i)
clear_test <- subset(testing_data, select=Ликвидность.активов:Банкрот)
View(testing_data)
View(testing_data)
View(clear_test)
View(clear_test)
#строим логистическую регрессию, оказалось, что Автономность мало влияет на Банкротство
glm.out <- step(glm(Банкрот ~ Ликвидность.активов + Рентабельность.активов + Доходность.активов + Оборачиваемость.активов, family=binomial, data=training_data))
summary(glm.out)
confint(glm.out)
exp(glm.out$coefficients)
exp(confint(glm.out))
#Округлим полученные значения
testing_data$predicted_value_log <-  predict(glm.out, newdata = clear_test, type = "response")
convert <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_log <- lapply(testing_data$predicted_value_log, convert)
#Строим регрессионное дерево
reg_tree <- rpart(Банкрот ~ ., data = clear_test, method = "anova")
printcp(reg_tree)
plotcp(reg_tree) # покажем график кросс-валидации
summary(reg_tree)
rsq.rpart(reg_tree) # visualize cross-validation results
# plot tree
plot(reg_tree, uniform=TRUE, main="Дерево регрессии")
text(reg_tree, use.n=TRUE, all=TRUE, cex=.8)
#Тестим дерево
testing_data$predicted_value_regtree <- predict(reg_tree,  testing_data, type = c("vector", "prob", "class", "matrix"), na.action = na.pass)
correct <- function(data){if(data >= 0.5)return (1) else return (0)}
testing_data$predicted_value_regtree <- testing_data$predicted_value_regtree - 1
testing_data$predicted_value_regtree <- lapply(testing_data$predicted_value_regtree, correct)
#Метод random forests
fit <- randomForest(Банкрот ~  ., data=clear_test)
print(fit) # view results
importance(fit) # importance of each predictor
#Тестим дерево
testing_data$predicted_value_random <-predict(fit, testing_data, type="response" )
training_data$ID <- NULL
#Алгоритм C.5.0
reg_tree_c50 <- C5.0(x = training_data[, -6], y = training_data$Банкрот)
testing_data$predicted_value_regtree50 <- predict(reg_tree_c50,  clear_test)
summary(reg_tree_c50)
View(testing_data)
View(training_data)
