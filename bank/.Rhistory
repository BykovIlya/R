source('C:/Users/Екатерина/Desktop/install_all.R', echo=TRUE)
Sys.setenv(LANG = "en")
install.packages("ISLR")
library("ISLR")
install.packages("tree")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree - cv.tree(tree_model, FUN = prune.misclass)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev)
plot(cv_tree$size,cv_tree$dev, type = "b")
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <= prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 4
plot(pruned_model)
text(pruned_model, pretty=0)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
library("ISLR")
library("tree")
attach(Carseats)
head(Carseats)
Hight <- ifelse(Carseats$Sales >=8, "Yes", "No" )
length(Hight)
Carseats <- data.frame(Carseats, Hight)
Carseats$Sales <- NULL
set.seed(2)
train = sample(1:nrow(Carseats), nrow(Carseats)/3)
test = - train
training_data = Carseats[train,]
testing_data = Carseats[test,]
testing_Hight = Hight[test]
#training
tree_model = tree(Hight ~ ., training_data)
plot(tree_model)
text(tree_model, pretty=0)
tree_pred = predict(tree_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 9) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
set.seed(3)
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size,cv_tree$dev, type = "b")
pruned_model <- prune.misclass(tree_model, best = 4) #взяли с графика 9
plot(pruned_model)
text(pruned_model, pretty=0)
tree_pred = predict(pruned_model, testing_data, type="class")
mean(tree_pred != testing_Hight)
Sys.setenv(LANG = "en")
#install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
#install.packages("MASS", dependencies=TRUE)
library("MASS")
#install.packages("epicalc", dependencies=TRUE)
library("epicalc")
#install.packages("outliers", dependencies = TRUE)
library("outliers")
#install.packages("rpart", dependencies = TRUE)
library("rpart")
#install.packages("randomForest", dependencies = TRUE)
library("randomForest")
#install.packages("C50", dependencies = TRUE)
library("C50")
#install.packages("neuralnet", dependencies = TRUE)
library("neuralnet")
#install.packages("knitr", dependencies = TRUE)
library("knitr")
install.packages("pander", dependencies = TRUE)
library("pander")
#СЃС‡РёС‚С‹РІР°РµРј РґР°РЅРЅС‹Рµ РёР· С„Р°Р№Р»Р°
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
setwd("~/GitHub/R/bank")
setwd("C:/Users/Екатерина/Documents/GitHub/R/bank")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#считываем данные из файла
bankruptcy <- read.csv(file="Предприятия-А.csv",stringsAsFactors = FALSE, header=TRUE, sep=";", dec= ".")
for (i in 2:7) bankruptcy[,i]  <- as.numeric(as.character(bankruptcy[,i]))
#Посмотрим на наши данные
summary(bankruptcy)
pairs(Банкрот ~ Ликвидность.активов + Рентабельность.активов	+ Доходность.активов	+ Автономность +	Оборачиваемость.активов,data = bankruptcy, main = "Диаграммы рассеивания для всех переменных")
boxplot(Ликвидность.активов ~ Банкрот , data = bankruptcy, xlab = "Ликвидность активов", ylab = "Банкрот", main = "Зависимость банкротства от ликвидности активов")
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
bankruptcy <- bankruptcy[ which(bankruptcy$Автономность < 30 ), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Рентабельность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Оборачиваемость.активов < 10), ]
bankruptcy <- bankruptcy[ which(bankruptcy$Доходность.активов > -6), ]
#Смотрим итоговую выборку
summary(bankruptcy)
boxplot(Рентабельность.активов ~ Банкрот , data = bankruptcy, xlab = "Рентабельность активов", ylab = "Банкрот", main = "Зависимость банкротства от рентабельности активов")
boxplot(Доходность.активов ~ Банкрот , data = bankruptcy, xlab = "Доходность активов", ylab = "Банкрот", main = "Зависимость банкротства от доходности активов")
boxplot(Автономность ~ Банкрот , data = bankruptcy, xlab = "Автономность", ylab = "Банкрот", main = "Зависимость банкротства от автономности активов")
boxplot(Оборачиваемость.активов ~ Банкрот , data = bankruptcy, xlab = "Оборачиваемость.активов", ylab = "Банкрот", main = "Зависимость банкротства от оборачиваемости активов")
#сбалансированно бьем выборку на тестовую и проверочную
ind1 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==1, select=ID: Банкрот)
ind0 <- subset(bankruptcy, bankruptcy[,"Банкрот"]==0, select=ID: Банкрот)
