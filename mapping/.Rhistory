num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Kate")
my_name]
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), , sep = "")
paste(c(1:3), c("X", "Y", "Z"), , sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
y
z <- rep(NA, 1000)
y_data <- sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
c(3, 5, 7)
[c(3, 5, 7)]
v <- c(3, 5, 7)
m <- c(3, 5, 7)
a <- c(3, 5, 7)
[f]
[a]
c[3, 5, 7]
c
x[c(3, 5, 7)]
x (i.e. x[0])
i.e. x[0]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:3
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
v
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
View(my_matrix)
View(my_matrix)
View(my_matrix)
View(my_vector)
View(my_vector)
my_matrix2 <- matrix(1:20, (dim(my_vector) <- c(4, 5))
setwd("~/Documents/GIT/R/mapping")
data <- read.csv("segments_1000.csv")
data$age_group <- as.factor(data$age_group)
data$foreign<- as.factor(data$foreign)
newdata <- data.frame(x= numeric(0))
newdata2 <- data.frame(x= numeric(0))
newdata3 <- data.frame(x= numeric(0))
View(data)
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
}
View(data)
View(data)
View(data)
newdata <- data[ which(data$route_id==2),] -> newdata2
View(data)
View(newdata2)
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(newdata$route_id[i]!=newdata2$route_id[j]) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
# между 2 векторами, которые были составлены из конца 1 отрезка и 2 концов другого отрезка.
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
# отрезков были пропорциональны. Для проверки второго условия, я находила угол
# между 2 векторами, которые были составлены из конца 1 отрезка и 2 концов другого отрезка.
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$y[j])==(newdata$x[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
View(newdata)
newdata <- data[ which(data$route_id==2),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
View(newdata)
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
View(newdata)
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$y[j])==(newdata$x[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
View(newdata3)
data <- read.csv("segments_1000.csv")
data$age_group <- as.factor(data$age_group)
data$foreign<- as.factor(data$foreign)
newdata <- data.frame(x= numeric(0)) # сюда заносим отрезки с одинаковым routeid
newdata2 <- data.frame(x= numeric(0)) # технический data frame для сравнения, копия newdata2
newdata3 <- data.frame(x= numeric(0)) # сюда заносим пересекающиеся пары
иональны. Для проверки второго условия, я находила угол
# между 2 векторами, которые были составлены из конца 1 отрезка и 2 концов другого отрезка.
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$y[j])==(newdata$x[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
for(a in 1:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
for(a in 2:max(data$route_id))
{
newdata <- data[ which(data$route_id==a),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
}
newdata <- data[ which(data$route_id==2),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
View(newdata3)
newdata <- data[ which(data$route_id==3),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
View(data)
newdata <- data[ which(data$route_id==6),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
newdata <- data[ which(data$route_id==9),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
View(newdata)
View(newdata3)
newdata3 <- data.frame(x= numeric(0)) # сюда заносим пересекающиеся пары
newdata <- data[ which(data$route_id==9),] -> newdata2
newdata$x <- newdata$end_lon - newdata$start_lon -> newdata2$x
newdata$y <- newdata$end_lat - newdata$start_lat -> newdata2$y
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
View(newdata3)
View(data)
data <- read.csv("segments_1000.csv")
data$age_group <- as.factor(data$age_group)
data$foreign<- as.factor(data$foreign)
data$x <- data$end_lon - data$start_lon
data$y <- data$end_lat - data$start_lat
newdata <- data.frame(x= numeric(0)) # сюда заносим отрезки с одинаковым routeid
newdata2 <- data.frame(x= numeric(0)) # технический data frame для сравнения, копия newdata2
newdata3 <- data.frame(x= numeric(0)) # сюда заносим пересекающиеся пары
newdata <- data[ which(data$route_id==9),] -> newdata2
View(newdata)
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata2))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata2$x[j])==(newdata$y[i]/newdata2$y[j]))
{
newdata3 <- rbind(newdata3, newdata[i,])
newdata3 <- rbind(newdata3, newdata2[j,])
}
}
}
}
View(newdata3)
View(newdata)
newdata <- data[ which(data$route_id==9),]
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata$x[j])==(newdata$y[i]/newdata$y[j]))
{
#Координаты 1 вектора
x1 <- newdata$start_lon[i] - newdata$start_lon[j]
y1 <- newdata$start_lat[i] - newdata$start_lat[j]
#Координаты 2 вектора
x2 <- newdata$end_lon[i] - newdata$start_lon[j]
y2 <- newdata$end_lat[i] - newdata$start_lat[j]
a <- (x1*x2 + y1*y2)/((sqrt(x1^2+y1^2))*(sqrt(x2^2+y2^2)))
#Координаты 3 вектора
x1 <- newdata$start_lon[i] - newdata$end_lon[j]
y1 <- newdata$start_lat[i] - newdata$end_lat[j]
#Координаты 4 вектора
x2 <- newdata$end_lon[i] - newdata$end_lon[j]
y2 <- newdata$end_lat[i] - newdata$end_lat[j]
b <- (x3*x4 + y3*y4)/((sqrt(x3^2+y4^2))*(sqrt(x3^2+y4^2)))
if((a==-1)||(b==-1))
{
newdata3 <- rbind(newdata3, newdata[j,])
newdata3 <- rbind(newdata3, newdata[j,])
}
}
}
}
}
newdata <- data[ which(data$route_id==9),]
for (i in 1: nrow(newdata))
{
for (j in 1: nrow(newdata))
{
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata$x[j])==(newdata$y[i]/newdata$y[j]))
{
#Координаты 1 вектора
x1 <- newdata$start_lon[i] - newdata$start_lon[j]
y1 <- newdata$start_lat[i] - newdata$start_lat[j]
#Координаты 2 вектора
x2 <- newdata$end_lon[i] - newdata$start_lon[j]
y2 <- newdata$end_lat[i] - newdata$start_lat[j]
a <- (x1*x2 + y1*y2)/((sqrt(x1^2+y1^2))*(sqrt(x2^2+y2^2)))
#Координаты 3 вектора
x3 <- newdata$start_lon[i] - newdata$end_lon[j]
y3 <- newdata$start_lat[i] - newdata$end_lat[j]
#Координаты 4 вектора
x4 <- newdata$end_lon[i] - newdata$end_lon[j]
y4 <- newdata$end_lat[i] - newdata$end_lat[j]
b <- (x3*x4 + y3*y4)/((sqrt(x3^2+y4^2))*(sqrt(x3^2+y4^2)))
if((a==-1)||(b==-1))
{
newdata3 <- rbind(newdata3, newdata[j,])
newdata3 <- rbind(newdata3, newdata[j,])
}
}
}
}
}
data <- read.csv("segments_1000.csv")
data$age_group <- as.factor(data$age_group)
data$foreign<- as.factor(data$foreign)
data$x <- data$end_lon - data$start_lon
data$y <- data$end_lat - data$start_lat
newdata <- data.frame(x= numeric(0)) # сюда заносим отрезки с одинаковым routeid
#newdata2 <- data.frame(x= numeric(0)) # технический data frame для сравнения, копия newdata2
newdata3 <- data.frame(x= numeric(0)) # сюда заносим пересекающиеся пары
newdata <- data[ which(data$route_id==9),]
i <- 2
j <-3
#Проверка на параллельность
if(i!=j) #исключаем сравнение одинаковых векторов
{
#проверяем коллинеарность векторов
if((newdata$x[i]/newdata$x[j])==(newdata$y[i]/newdata$y[j]))
{
#Координаты 1 вектора
x1 <- newdata$start_lon[i] - newdata$start_lon[j]
y1 <- newdata$start_lat[i] - newdata$start_lat[j]
#Координаты 2 вектора
x2 <- newdata$end_lon[i] - newdata$start_lon[j]
y2 <- newdata$end_lat[i] - newdata$start_lat[j]
a <- (x1*x2 + y1*y2)/((sqrt(x1^2+y1^2))*(sqrt(x2^2+y2^2)))
#Координаты 3 вектора
x3 <- newdata$start_lon[i] - newdata$end_lon[j]
y3 <- newdata$start_lat[i] - newdata$end_lat[j]
#Координаты 4 вектора
x4 <- newdata$end_lon[i] - newdata$end_lon[j]
y4 <- newdata$end_lat[i] - newdata$end_lat[j]
b <- (x3*x4 + y3*y4)/((sqrt(x3^2+y4^2))*(sqrt(x3^2+y4^2)))
if((a==-1)||(b==-1))
{
newdata3 <- rbind(newdata3, newdata[j,])
newdata3 <- rbind(newdata3, newdata[j,])
}
}
}
x1 <- newdata$start_lon[i] - newdata$start_lon[j]
y1 <- newdata$start_lat[i] - newdata$start_lat[j]
#Координаты 2 вектора
x2 <- newdata$end_lon[i] - newdata$start_lon[j]
y2 <- newdata$end_lat[i] - newdata$start_lat[j]
a <- (x1*x2 + y1*y2)/((sqrt(x1^2+y1^2))*(sqrt(x2^2+y2^2)))
#Координаты 3 вектора
